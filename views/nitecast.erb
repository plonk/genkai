<!doctype html>
<html lang="ja">
  <head>
    <title>Nitecast</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta charset="utf-8">
    <link rel="shortcut icon" type="image/png" href="/nitecast.png">
    <script src="/bower_components/jquery/dist/jquery.min.js"></script>
    <style>
      #message {
          line-height: 18px;
          font-weight: bold; color: #ff8000; margin-top: 6px; font-size: 16px; padding-left: 2px;
          text-shadow: 0px -1px 0px #000080,
                       1px -1px 0px #000080,
                       1px 0px 0px #000080,
                       2px 0px 0px #000080,
                       3px 0px 0px #000080,
                       4px 0px 0px #000080,
                       1px 1px 0px #000080,
                       2px 1px 0px #000080,
                       3px 1px 0px #000080,
                       4px 1px 0px #000080,
                       1px 2px 0px #000080,
                       2px 2px 0px #000080,
                       3px 2px 0px #000080,
                       4px 2px 0px #000080,
                       1px 3px 0px #000080,
                       2px 3px 0px #000080,
                       3px 3px 0px #000080,
                       4px 3px 0px #000080,
                       1px 1px 0px #000080,
                       0px 1px 0px #000080,
                       -1px 1px 0px #000080,
                       -1px 0px 0px #000080,
                       -1px -1px 0px #000080;
      }
    </style>
  </head>
  <body style="margin: 0">
    <div style="line-height: 10px;  font-family: 'MS PGothic'; font-size: 12px; padding-top: 0px"><span style="display: inline-block; line-height: 16px; background-color: #c06060bb; color: #fff; padding-left: 4px; padding-right: 4px; text-shadow: #000000cc 1px 1px;"><span id="logo" title="ロゴ">nitecast</span> <span id="silent" style="display:none" title="消音">&#x1f507;<!-- muted speaker --></span> <span id="channel"></span> <span id="thread" title="スレッド">&#x1f9f5; <%= h @thread.subject %></span><span id="netinfo" title="回線情報"></span><span id="clock" title="時計"></span><span id="weather" title="天気"></span><span id="battery" title="バッテリー"></span></span><br><div id="message"></div></div>

  <audio id=kiri2 preload=auto src="/kiri2.wav"></audio>
  <button id=unmuteBtn style="margin-top: 16px; margin-left: 16px">ミュート解除</button>

  <script src="/yomiage.js?<%= Time.now.to_i %>"></script>
  <script>
    // extern yomiage.js:

    $yomiage_board_id = "<%= @board.id %>"
    $yomiage_thread_id = "<%= @thread.id %>"

    // var $dat_size

    // -------------------------------------------------
    var $queue = [];
    let $silentMode = false

    async function showNextMessage() {
        var post = $queue.shift();
        if (post.subject !== 'muted') {
            $('#message').html(post.body);
            var forSpeech = massage(post.body);
            console.log("forSpeech", forSpeech);
            if ($silentMode) {
                await delay(5000);
            } else {
                await speakDispatch(forSpeech);
            }
            await delay(5000 / ($queue.length+1));
            // ↑この式はケアが要る。
            $('#message').html('');
        } else {
            console.info('muted message skipped')
        }
    }

    function showUnmuteButton() {
        window.unmuteBtn.hidden = false;
    }

    function updateNetworkType() {
        let text;
        switch (navigator.connection.type) {
            case 'cellular':
                text = "モバイル"
                break
            case 'wifi':
                text = "WiFi"
                break
            case 'none':
                text = "接続なし"
                break
            default:
                text = navigator.connection.type
                break
        }
        $('#netinfo').html(` &#x1f4f6; ${text}`);
    }

    function updateClock() {
        const d = new Date();
        const yy = d.getYear() % 100;
        const mon = ("" + (d.getMonth() + 1) ) //.padStart(2, '0')
        const mday = ("" + d.getDate() ) //.padStart(2, '0')
        const wday = "日月火水木金土"[d.getDay()]
        const hh = ("" + d.getHours() ).padStart(2, '0')
        const mm = ("" + d.getMinutes() ).padStart(2, '0')
        const ss = ("" + d.getSeconds() ).padStart(2, '0')

        const str = `${yy}年${mon}月${mday}日 ${hh}:${mm}:${ss}`;
        $('#clock').html(` &#x1f552; ${str}`);
    }

    function updateBattery(battery) {
        const ch_charging = '&#x26a1;' //'&#x1f50c;'
        const ch_low_battery = '&#x1faab;'
        const ch_battery = '&#x1f50b;'

        $('#battery').html(` ${(battery.level <= 0.15) ? ch_low_battery : ch_battery}${(battery.charging) ? ch_charging : ''} ${Math.round(battery.level * 100)}%`)
    }

    async function updateWeather() {
        const data = {weather: [{main:"Unknown"}], main: {temp: NaN}}
        const table = {
            Clouds: "くもり",
            Rain: "あめ",
            Snow: "ゆき",
            Clear: "はれ",
            Thunderstorm: "かみなり",
        };

        const etable = {
            Clouds: "&#x2601;&#xfe0f;",
            Rain: "&#x2602;&#xfe0f;",
            Snow: "&#x2744;&#xfe0f;",
            Clear: "&#x2600;&#xfe0f;",
            Thunderstorm: "&#x26c8;&#xfe0f;",
        };

        const main = data['weather'][0]['main']
        const word = table[main] || main
        const emoji = etable[main] || '?'

        const temp = `${Math.round(data.main.temp)}&#x2103;`
        $('#weather').html(` ${emoji} ${word} ${temp}`)
    }

    function formatUptime(totalSeconds) {
        if (totalSeconds < 3600) {
            const seconds = totalSeconds % 60
            const minutes = Math.floor(totalSeconds / 60)
            const s = ("" + seconds).padStart(2, '0')
            const m = ("" + minutes).padStart(2, '0')
            return `${m}:${s}`
        } else {
            const seconds = totalSeconds % 60
            const minutes = Math.floor((totalSeconds % 3600) / 60)
            const hours = Math.floor(totalSeconds / 3600)
            const s = ("" + seconds).padStart(2, '0')
            const m = ("" + minutes).padStart(2, '0')
            const h = ("" + hours).padStart(2, '0')
            return `${h}:${m}:${s}`
        }
    }

    function h(unsafe) {
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }
    async function updateChannelStatusAsync(channel_name) {
        while (true) {
            const emoji = "&#x1f4fa;" // television
            // "&#x25b6;&#xfe0f;" play button
            let response
            try {
                response = await fetch(`https://pcgw.pgw.jp/api/1/channelStatus?name=${encodeURIComponent(channel_name)}`)
            } catch (e) {
                $('#channel').html(emoji + ` Fetch error`)
                await delay(10 * 1000)
                continue;
            }
            if (response.ok) {
                const data = await response.json()
                if (data.result) {
                    if (data.result.length > 0) {
                        const r = data.result[0]
                        const genre = r.genre.replace(/^.p[?@]*/, '')
                        const ndigits = Math.floor(Math.log10(r.bitrateOfficial * 1.2)) + 1
                        const bitrate = ("" + r.bitrateActual).padStart(ndigits, ' ')
                        $('#channel').html(// emoji +
                                           // ` ${h(r.name)}` +
                                           ` &#x2139;&#xfe0f; ${h(r.description)}` + 
                                           ` &#x1f441;&#xfe0f; <span style="white-space: pre-wrap; font-family: 'MS Gothic', monospace">${r.totalDirects}/${r.totalRelays}</span>` +
                                           ` &#x1f497; <span style="white-space: pre-wrap; font-family: 'MS Gothic', monospace">${formatUptime(r.uptime)}</span>` +
                                           ` &#x2b06;&#xfe0f; <span style="white-space: pre-wrap; font-family: 'MS Gothic', monospace">${bitrate}</span>kbps` )
                    } else {
                        $('#channel').html(emoji + h(` "${channel_name}" not found`))
                        await delay(10 * 1000)
                        continue;
                    }
                } else {
                    $('#channel').html(emoji + " API Error")
                    await delay(10 * 1000)
                    continue;
                }
            } else {
                $('#channel').html(emoji + ` ${status} Error`)
                await delay(10 * 1000)
                continue;
            }
            await delay(1000)
        }
    } 

    function processOptions(params) {
        const options = {
            webapi() {
                // クエリ文字列に webapi キーが指定された場合は speech.pcgw.pgw.jp の API を使う。
                // そうでなければ ブラウザ組み込みの 音声読み上げを使う。
                window.speakDispatch = speakHttpApi;
            },

            channel() {
                updateChannelStatusAsync(params.get('channel'))
            },

            silent() {
                $('#silent').show()
                $silentMode = true;
            },

            nologo() {
                $('#logo').hide()
            },

            nothread() {
                $('#thread').hide()
            },

            netinfo() {
                if (navigator.connection) {
                    if (navigator.connection.type) {
                        updateNetworkType();
                        navigator.connection.addEventListener('change', () => {
                            updateNetworkType()
                        });
                    } else {
                        $('#netinfo').html(` &#x274c; Network Type N/A`)
                    }
                } else {
                    $('#netinfo').html(` &#x274c; Network Information API N/A`)
                }
            },

            clock() {
                updateClock();
                setInterval(() => {
                    updateClock();
                }, 1000)
            },

            weather() {
                updateWeather().then(() => {
                    setInterval(() => {
                        updateWeather()
                    }, 300 * 1000) // every 5min
                })
            },

            battery() {
                if (navigator.getBattery) {
                    navigator.getBattery().then((battery) => {
                        updateBattery(battery)
                        battery.addEventListener('chargingchange', () => updateBattery(battery))
                        battery.addEventListener('levelchange', () => updateBattery(battery))
                    })
                } else {
                    $('#battery').html(` &#x274c; Battery API N/A`)
                }
            },
        }

        for (const name of Object.keys(options)) {
            if (params.get(name) !== null) {
                options[name]()
            }
        }
    }

    async function main() {
        try {
            window.speakDispatch = speakSpeechSynthesis;

            processOptions(new URLSearchParams(window.location.search))

            // スクリプト主導の音声再生ができるかテストする。
            window.unmuteBtn.hidden = true
            if (!$silentMode) {
                new Audio("/enabled.wav").play().catch(err => {
                    window.unmuteBtn.hidden = false;
                });
            }
            window.unmuteBtn.onclick = ev => {
                new Audio("/enabled.wav").play().then(_ => {
                    window.unmuteBtn.hidden = true
                });
            };

            while ($dat_size === null) {
                try {
                    $dat_size = await getInitialDatSize();
                } catch(textStatus) {
                    if (textStatus != "timeout")
                        await delay(10*1000);
                }
            }

            while (true) {
                while (true) {
                    try {
                        var data = await getNewMessages();
                        console.log(data.posts);

                        $queue = $queue.concat(data.posts);
                        $dat_size = data.dat_size;
                        break;
                    } catch(textStatus) {
                        if (textStatus !== "timeout") {
                            await delay(5*1000);
                        }
                    }
                }

                while ($queue.length) {
                    await showNextMessage();
                }
            }

        } catch (e) {
            $('#message').text(e.message)
        }
    }

    $(function(){
        main();
    })
  </script>

  </body>
</html>
