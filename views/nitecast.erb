<!doctype html>
<html lang="ja">
  <head>
    <title>Nitecast</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta charset="utf-8">
    <script src="/bower_components/jquery/dist/jquery.min.js"></script>
    <style>
      #message {
          line-height: 18px;
          font-weight: bold; color: #ff8000; margin-top: 6px; font-size: 16px; padding-left: 2px;
          text-shadow: 0px -1px 0px #000080,
                       1px -1px 0px #000080,
                       1px 0px 0px #000080,
                       2px 0px 0px #000080,
                       3px 0px 0px #000080,
                       4px 0px 0px #000080,
                       1px 1px 0px #000080,
                       2px 1px 0px #000080,
                       3px 1px 0px #000080,
                       4px 1px 0px #000080,
                       1px 2px 0px #000080,
                       2px 2px 0px #000080,
                       3px 2px 0px #000080,
                       4px 2px 0px #000080,
                       1px 3px 0px #000080,
                       2px 3px 0px #000080,
                       3px 3px 0px #000080,
                       4px 3px 0px #000080,
                       1px 1px 0px #000080,
                       0px 1px 0px #000080,
                       -1px 1px 0px #000080,
                       -1px 0px 0px #000080,
                       -1px -1px 0px #000080;
      }
    </style>
  </head>
  <body style="margin: 0">
    <div style="line-height: 10px;  font-family: 'MS PGothic'; font-size: 12px; padding-top: 1px"><span style="background-color: #c06060; color: #fff; padding-left: 1px; padding-right: 1px;">nitecast <%= @thread.subject %></span><br><div id="message"></div></div>

  <audio id=kiri2 preload=auto src="/kiri2.wav"></audio>
  <button id=unmuteBtn style="margin-top: 16px; margin-left: 16px">ミュート解除</button>

  <script>
    // クエリ文字列に webapi キーが指定された場合は speech.pcgw.pgw.jp の API を使う。
    // そうでなければ ブラウザ組み込みの 音声読み上げを使う。
    const params = new URLSearchParams(window.location.search)
    if (params.get('webapi') !== null)
        window.speakDispatch = speakAques;
    else
        window.speakDispatch = speakSpeechSynthesis;

    // [戻る]→[進む]した時、queueに多量に追加されるのでこれは問題。ペー
    // ジロード時に JS で現在のサイズを取得すべき。
    var $dat_size = <%= @thread.bytesize %>;

    var $queue = [];
    function getNewMessages() {
        console.log("getNewMessages");
        $.ajax("/<%= [@board.id, 'dat', @thread.id + '.dat'].join('/') %>?long_polling=1&format=json",
               {
                   headers: { Range: "bytes=" + $dat_size + "-" },
                   cache: false,
                   dataType: 'json',
                   success: function(data, textStatus, jqXHR){
                       console.log(data.messages);
                       $queue = $queue.concat(data.messages);
                       setTimeout(startShowProcess, 0);
                       $dat_size = data.dat_size;
                       getNewMessages();
                   },
                   error: function(req, textStatus){
                       if (textStatus == "timeout") {
                           getNewMessages();
                       } else {
                           console.log(textStatus);
                           setTimeout(getNewMessages, 30*1000);
                       }
                   },
                   timeout: 120*1000,
               });
    }
    var $showProcessRunning = false;
    function startShowProcess() {
        if ($showProcessRunning) return;
        showProcess();
    }
    function showProcess() {
        console.log("showProcess");
        $showProcessRunning = true;
        if ($queue.length > 0) {
            var message = $queue.shift();
            $('#message').html(message);
            var forSpeech = massage(message);
            console.log("forSpeech", forSpeech);
            speakDispatch(forSpeech, _ => {
                setTimeout(_ => {
                    $('#message').html('');
                    showProcess();
                }, 5000 / ($queue.length+1));
                // ↑この式はケアが要る。
            });
        } else {
            $showProcessRunning = false;
        }
    }
    function htmlUnescape(str) {
        var textArea = document.createElement('textarea');
        textArea.innerHTML = str;
        return textArea.value;
    }
    function massage(text) { // もみもみ
        // メッセージを読み上げに適した形に修正する。
        text = text.replace(/ <br> /g, ' ');
        text = text.replace(/h?ttps?:\/\/[A-Za-z0-9+\/~_\-.]+/g, "[URL]");
        text = text.replace(/<a href="[^"]+">&gt;&gt;(\d+)<\/a>/g, (_, p1) => p1 + " ");
        text = text.replace(/&#x?\d+;/g, ""); // 数値実体参照を全削除する。
        text = text.replace(/(.)\1{3,}/g, m => m.slice(0, 4)); // 4つ以上連続する文字を4つ目以降削除する。
        text = htmlUnescape(text);
        return text;
    }
    function speakAques(text, cont) {
        var req = new XMLHttpRequest();
        var params = `text=${encodeURI(text)}&format=ogg`;

        req.open("POST", "http://speech.pcgw.pgw.jp/v1/tts", true);
        req.responseType = 'blob';
        req.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

        req.addEventListener('load', ev => {
            // レス着信音を鳴らして、500msのディレイの後にテキストの再生を始める。
            var au = new Audio(URL.createObjectURL(req.response));
            au.addEventListener("ended", _ => {
                cont();
            });
            var au2 = new Audio("/kiri2.wav");
            au2.addEventListener("ended", _ => {
              au.play();
            });
            au2.play();
        });
        req.addEventListener('error', ev => {
            console.log(ev);
            const au = new Audio('/failure.wav');
            au.addEventListener("ended", _ => {
                cont();
            });
            au.play();
        });
        req.send(params);
    }
    function speakSpeechSynthesis(text, cont) {
        const synth = window.speechSynthesis;
        var utter = new SpeechSynthesisUtterance(text);
        const voices = window.speechSynthesis.getVoices();
        utter.lang = "ja";

        var ji = new Audio("/kiri2.wav");
        ji.addEventListener("ended", _ => {
	    utter.addEventListener("end", _ => {
		cont();
	    });
	    utter.addEventListener("error", ev => {
		console.log(ev);
		const au = new Audio('/failure.wav');
		au.addEventListener("ended", _ => {
		    cont();
		});
		au.play();
	    });
	    synth.speak(utter);
        });
        ji.play();
    }
    function showUnmuteButton() {
        window.unmuteBtn.hidden = false;
    }
    // スクリプト主導の音声再生ができるかテストする。
    window.unmuteBtn.hidden = true
    new Audio("/enabled.wav").play().catch(err => {
        window.unmuteBtn.hidden = false;
    });
    window.unmuteBtn.onclick = ev => {
        new Audio("/enabled.wav").play().then(_ => {
            window.unmuteBtn.hidden = true
        });
    };

    getNewMessages();
  </script>

  </body>
</html>
